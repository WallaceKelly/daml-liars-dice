module Invitation where

import DA.Assert
import DA.Foldable (forA_)
import Players
import GamePlay

type InvitationId = ContractId Invitation

template Invitation with
    admin : Party
    public : Party
    host : Party
    otherPlayers : [Party]
    ante : Int
  where
    signatory host
    observer public, otherPlayers

    choice Join : InvitationId
      with
        newPlayer : Party
      controller newPlayer
      do
        newPlayer =/= host
        assert (newPlayer `notElem` otherPlayers) 
        create this with otherPlayers = newPlayer :: otherPlayers

    choice Ready : PlayersReadyId
      controller host
      do
        create PlayersReady with
          players = host :: otherPlayers
          ..

type PlayersReadyId = ContractId PlayersReady

template PlayersReady with
    admin : Party
    host : Party
    players : [Party]
    ante : Int
  where
    signatory host
    observer admin

    choice Start : GameStartedId
      with dices : [[Int]]
      controller admin
      do
        length dices === length players
        forA_ (zip players dices) (\(player, dice) -> do
          exerciseByKey @Player (admin, player) StartPlaying with ..)
        create GameStarted with players, ..
